name: AMI

on:
  pull_request:
    types:
      - closed

jobs:
  packer:
    runs-on: ubuntu-latest
    name: packer

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}

    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16' 

    - name: Set up MySQL
      run: |

        sudo /etc/init.d/mysql start

        mysql -e "CREATE DATABASE $DB_NAME;" -u$DB_USER -p"$DB_PASSWORD"

    - name: Install project dependencies
      run: npm install

    - name: Run integration tests
      id: test
      run: |
        npm test
        echo "Test exit code: $?"
      #continue-on-error: true

    - name: On Success
      if: steps.test.outcome == 'success'
      uses: myrotvorets/set-commit-status-action@master
      with:
        sha: ${{ github.sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        status: success
        context: CI/Tests
        description: 'Integration tests passed'
    
    - name: on failure
      if: steps.test.outcome == 'failure'
      uses: myrotvorets/set-commit-status-action@master
      with:
        sha: ${{ github.sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        status: failure
        context: CI/Tests
        description: 'Integration tests failed'


    - name: Check out code
      uses: actions/checkout@v2

    - name: Install Packer
      run: |
        sudo apt-get update
        sudo apt-get install -y packer

    - name: Zip the project & copy to repo
      run: |
        npm install
        cd ../
        zip -r webapp.zip webapp
        cd -
        cp ../webapp.zip .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup 'packer'
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: '1.8.3'

    # Initialize Packer templates
    - name: Initialize Packer Template
      run: packer init webapp-debian.pkr.hcl

    # Build artifact
    - name: Build Artifact
      run: packer build webapp-debian.pkr.hcl | tee packer_output.log

    # Capture the AMI ID generated by Packer
    - name: Set AMI ID
      id: set-ami-id
      run: |
        AMI_ID=$(grep -oP 'us-east-1: ami-\w+' packer_output.log | awk '{print $NF}')
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV


    - name: Configure AWS Credentials demo
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
        aws-region: us-east-1
      env:
        AMI_ID: ${{ env.AMI_ID }}
 
    - name: Copying AMI Artifacts and Launching Template
      run: |
          pwd
          ls
          latestAmi=$(aws ec2 describe-images --filters "Name=owner-id,Values=214910345944" --query "sort_by(Images, &CreationDate)[-1].[ImageId]" --output "text")
          echo "latest AMI:"
          echo $latestAmi
          aws ec2 create-launch-template-version --launch-template-name my-launch-template --launch-template-data "ImageId=$latestAmi" --source-version 1
      env:
          AWS_REGION: us-east-1
 
    - name: Instance Refresh
      run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name my-asg --preferences '{"InstanceWarmup": 300, "MinHealthyPercentage": 50}' --desired-configuration '{"LaunchTemplate":{"LaunchTemplateName": "my-launch-template" , "Version": "$Latest"}}'
      env:
          AWS_REGION: us-east-1
 
    - name: Wait for Instance Refresh to Complete
      run: |
          while true; do
            refreshStatus=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name my-asg --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$refreshStatus" = "Successful" ]; then
              echo "Instance Refresh completed successfully!"
              break
            elif [ "$refreshStatus" = "Failed" ]; then
              echo "Instance Refresh failed!"
              exit 1
            else
              echo "Waiting for Instance Refresh to complete..."
              sleep 60
            fi
          done
      env:
          AWS_REGION: us-east-1
