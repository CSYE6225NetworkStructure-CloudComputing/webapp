name: AMI

on:
  pull_request:
    types:
      - closed

jobs:
  packer:
    runs-on: ubuntu-latest
    name: packer

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' 

      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE $DB_NAME;" -u$DB_USER -p"$DB_PASSWORD"

      - name: Install project dependencies
        run: npm install

      - name: Run integration tests
        id: test
        run: |
          npm test
          echo "Test exit code: $?"
        #continue-on-error: true

      - name: On Success
        if: steps.test.outcome == 'success'
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: success
          context: CI/Tests
          description: 'Integration tests passed'
      
      - name: on failure
        if: steps.test.outcome == 'failure'
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: failure
          context: CI/Tests
          description: 'Integration tests failed'

  - name: Configure AWS Credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: us-east-1

  - name: Setup 'packer'
    uses: hashicorp/setup-packer@main
    id: setup
    with:
      version: '1.8.3'

  # Initialize Packer templates
  - name: Initialize Packer Template
    run: packer init webapp-debian.pkr.hcl

  # Build artifact
  - name: Build Artifact
    run: packer build webapp-debian.pkr.hcl

  - name: Configure AWS Credentials
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
      aws-region: us-east-1

  # Create a new Launch Template version in the Demo account
  - name: Create Launch Template Version  
    run: |
      ami_id="${{ steps.packer-build.outputs.ami_id }}"
      lt_id="lt-03e37c0f5bb8a2afe"
      aws ec2 create-launch-template-version \
        --launch-template-id "$lt_id" \
        --version-description "Updated with latest AMI" \
        --launch-template-data "{\"blockDeviceMappings\":[{\"deviceName\":\"/dev/sda1\",\"ebs\":{\"deleteOnTermination\":true,\"volumeSize\":30,\"volumeType\":\"gp2\",\"snapshotId\":\"$ami_id\"}}]}"
    env:
      AWS_DEFAULT_REGION: us-east-1  # Replace with your desired region

  # Update the Auto Scaling group in the Demo account
  - name: Update Auto Scaling Group
    run: |
      lt_id="lt-03e37c0f5bb8a2afe"
      asg_name="my-asg-fc24038"
      lt_version=$(cat latest_version.txt)
      aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$asg_name" --launch-template "{\"LaunchTemplateId\":\"$lt_id\",\"Version\":\"$lt_version\"}"
    depends-on: create-lt-version
    env:
      AWS_DEFAULT_REGION: us-east-1  #   region

  # Start the instance refresh
  - name: Start Instance Refresh
    run: |
      aws autoscaling start-instance-refresh --auto-scaling-group-name my-asg-fc24038

  # Check the instance refresh status until it's completed
  - name: Wait for Instance Refresh
    run: |
      while true; do
          refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name my-asg-fc24038 --query 'InstanceRefreshes[0].Status' --output text)
          if [ "$refresh_status" == "Successful" ]; then
              echo "Instance refresh completed successfully."
              exit 0
          elif [ "$refresh_status" == "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
          else
              echo "Instance refresh is still in progress. Waiting..."
              sleep 30  # Adjust the polling interval as needed
          fi
      done
