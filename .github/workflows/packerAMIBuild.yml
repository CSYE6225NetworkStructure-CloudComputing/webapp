name: AMI

on:
  pull_request:
    types:
      - closed

jobs:
  packer:
    runs-on: ubuntu-latest
    name: packer

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}

    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16' 

    - name: Set up MySQL
      run: |

        sudo /etc/init.d/mysql start

        mysql -e "CREATE DATABASE $DB_NAME;" -u$DB_USER -p"$DB_PASSWORD"

    - name: Install project dependencies
      run: npm install

    - name: Run integration tests
      id: test
      run: |
        npm test
        echo "Test exit code: $?"
      #continue-on-error: true

    - name: On Success
      if: steps.test.outcome == 'success'
      uses: myrotvorets/set-commit-status-action@master
      with:
        sha: ${{ github.sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        status: success
        context: CI/Tests
        description: 'Integration tests passed'
    
    - name: on failure
      if: steps.test.outcome == 'failure'
      uses: myrotvorets/set-commit-status-action@master
      with:
        sha: ${{ github.sha }}
        token: ${{ secrets.GITHUB_TOKEN }}
        status: failure
        context: CI/Tests
        description: 'Integration tests failed'


    - name: Check out code
      uses: actions/checkout@v2

    - name: Install Packer
      run: |
        sudo apt-get update
        sudo apt-get install -y packer

    - name: Zip the project & copy to repo
      run: |
        npm install
        cd ../
        zip -r webapp.zip webapp
        cd -
        cp ../webapp.zip .

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup 'packer'
      uses: hashicorp/setup-packer@main
      id: setup
      with:
        version: '1.8.3'

    # Initialize Packer templates
    - name: Initialize Packer Template
      run: packer init webapp-debian.pkr.hcl

    # Build artifact
    - name: Build Artifact
      run: packer build webapp-debian.pkr.hcl | tee packer_output.log

    # Capture the AMI ID generated by Packer
    - name: Set AMI ID
      id: set-ami-id
      run: |
        AMI_ID=$(grep -oP 'us-east-1: ami-\w+' packer_output.log | awk '{print $NF}')
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV


    - name: Configure AWS Credentials demo
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
        aws-region: us-east-1
      env:
        AMI_ID: ${{ env.AMI_ID }}

    - name: Create Launch Template Version  
      run: |
        ami_id="${{ env.AMI_ID }}"
        lt_id="lt-0f4e50f631edc99f2"
        aws ec2 create-launch-template-version \
           --launch-template-id "$lt_id" \
           --version-description "Updated with latest AMI" \
           --launch-template-data "{\"ImageId\":\"$ami_id\"}"
      env:
        AWS_DEFAULT_REGION: us-east-1  # Replace with your desired region
        
    - name: Update Auto Scaling Group
      run: |
        lt_id="lt-0f4e50f631edc99f2"
        asg_name="my-asg-6eae5c1"
        lt_version=$(aws ec2 describe-launch-template-versions --launch-template-id "$lt_id" --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)
        aws autoscaling update-auto-scaling-group --auto-scaling-group-name "$asg_name" --launch-template "{\"LaunchTemplateId\":\"$lt_id\",\"Version\":\"$lt_version\"}"
      env:  
        AWS_DEFAULT_REGION: us-east-1  # Replace with your desired region

    - name: Instance Refresh Command
      run: |
        asg_name="my-asg-6eae5c1"
        aws autoscaling start-instance-refresh --auto-scaling-group-name "$asg_name"
      env:
        AWS_DEFAULT_REGION: us-east-1  

